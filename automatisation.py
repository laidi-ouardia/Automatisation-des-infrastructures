# -*- coding: utf-8 -*-
"""Automatisation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XjtGM21OyryR9ph-frPuAPqOCQPOXlFW
"""

import pandas as pd
import csv
import pandas as pd
import requests
import os
import numpy as np

from pyspark.conf import SparkConf
from pyspark.sql import SparkSession
from pyspark import *

spark =  SparkSession.builder.getOrCreate()



req = "https://opendata.paris.fr/api/v2/catalog/datasets/comptages-routiers-permanents/exports/csv?t_1h>date'2021-12-12'&limit=500"
reponse = requests.get(req)
print(reponse)
contenu = reponse.text
#print((contenu))

with open('reponse.csv', 'w') as f:
    writer = csv.writer(f)
    for line in reponse.iter_lines():
        writer.writerow(line.decode('utf-8').split(','))

df = spark.read.csv("reponse.csv")
df.printSchema()

import pandas as pd 
 
data1 = spark.read.csv('reponse.csv', header = True, sep = ";" ) 
data2 = spark.read.csv('table2.csv',  header = True , sep = ";" ) 
data2.printSchema()
data2.show()

table_res = data1.join(data2, data1.libelle == data2.libelle , "outer")
table_res.show()
table_res.drop

table_res = table_res.drop('iu_ac')
table_res = table_res.drop('t_1h')
table_res = table_res.drop('libelle')
table_res = table_res.drop('etat_trafic')

table_res.write.csv("table_res.csv", sep=';')

#!pip install pyspark

df2 =df.copy()
print(df2)
df2=df2.assign(arrondissement="Not yet")

df2['arrondissement']

np.unique(str(df2['libelle']))

df2['libelle'].shape

df2['libelle'].head()

my_list=df2['libelle']

my_list = list(set(my_list))

print(my_list)

"""16ᵉ arrondissement
16th arrondissement
16th
13 arrondissement 
Arrondissement: 13e
Belleville Arrondissement municipal: 20e
Rue des pyrenée : 20ᵉ arrondissement
av simon 19 arrondissement
bd balesherbs 8th arrondissement
Gal_Catroux-N 17th arrondissement
AE_Brancion_1 15th arrondissemnet
Av_de_Tourville 7me arrondissement
Av_de_Villars 7th arrondissement
Bd_des_Invalides 7th arrondissemnt
Av_de_Villars 7th arrondissement
Vaugirard 15th arrondissement
Corentin_Cariou 19th arrondissement
Av_Flandre 19th arrondissement
Crimee 19 th arrondissement
"""

df2['arrondissement'] = df2['libelle'].map({'Bd_des_Invalides':'7th arrondissement', 'Belleville':'20th arrondissement', 'Tolbiac' :'13th arrondissement', 'Crimee':'19th arrondissement', 'Exelmans':'16th arrondissement', 'Pyrenees':'20th arrondissement', 'Vaugirard':'15th arrondissement', 'Neuve_Tolbiac':'13th arrondissement', 'Av_Rene_Coty':'14th arrondissement', 'AE_Brancion_1':'15th arrondissement', 'Quai_St_Exupery':'16th arrondissement', 'Av_de_Tourville':'7th arrondissement', 'Corentin_Cariou':'19th arrondissement', 'Av_Simon_Bolivar':'19th arrondissement', 'Bd_Malesherbes':'17th arrondissement', 'Quai_Louis_Bleriot':'16th arrondissement', 'Gal_Catroux-N':'17th arrondissement', 'Av_de_Villars':'7th arrondissement', 'Av_Flandre':'19th arrondissement'},
                             na_action=None)

df2['arrondissement']

my_arrondissement=df2['arrondissement']

my_arrondissement = list(set(my_arrondissement))

my_arrondissement

df2.head()

df2=df2.drop(df2.loc[:, 'q':'k'].columns, axis = 1)

df2=df2.drop(df2.loc[:, 'iu_nd_amont':'geo_shape'].columns, axis = 1)

table= df2.to_csv("table2.csv",sep=';',encoding='utf-8')

view_table = pd.read_csv('table2.csv', sep=';', header=0)
view_table

import pandas as pd 
  
data1 = pd.read_csv('reponse.csv', sep=';', header=0) 
data2 = pd.read_csv('table2.csv', sep=';', header=0) 
  
table_res = pd.merge(data1, data2,  
                   
                   on='libelle',  
                   how='left') 
  
print(table_res)

table_res.to_csv("table_resultante.csv",sep=';',encoding='utf-8')

table_res.groupby('arrondissement')['etat_trafic_y'].transform('count')

"""# Nouvelle section"""

table_res=table_res.assign(count=0)

grouped_count = table_res[["arrondissement", "etat_trafic_y","count"]] \
        .groupby(by=["arrondissement", "etat_trafic_y"]) \
        .count()  \
        .reset_index()
print(grouped_count)

table_res.groupby(['arrondissement', 'etat_trafic_y']).count()

table_res.groupby(['arrondissement', 'etat_trafic_y']).size()

table_res.groupby(['arrondissement', 'etat_trafic_y']).mean()

